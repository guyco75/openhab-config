
rule "AC System Start"
  when
    System started
  then
    postUpdate(ac_mode, 1);
    postUpdate(ac_temp, 21);
    postUpdate(ac_fan, 3);
end

rule "AC Poll Temp Humid"
  when
    Time cron "0 * * ? * *" or
    System started
  then
    //logInfo("Air Conditioner", "send temp/humid query");
    sendCommand(Arduino, "$1,#");
end

rule "AC Arduino message"
  when
    Item Arduino received update
  then
    logInfo("Air Conditioner", Arduino.state.toString)
    // TODO: parse string and verify correct format...
    // TODO: remove quotes "x" from values
    if (Arduino.state.toString.startsWith("${\"status\":\"0\",\"temperature\":")) {
      var t = Arduino.state.toString.split(",").get(1).split(":").get(1).split("\"").get(1);
      var h = Arduino.state.toString.split(",").get(2).split(":").get(1).split("\"").get(1);
      postUpdate(livingTemp01, t);
      postUpdate(livingHum01, h);
      if (ac_i_feel.state == ON) {
        var String arduino_cmd = "$2,0," + ac_mode.state + "," + ac_fan.state + ",1,1," + (Float::parseFloat(t)-2).intValue + ",#";
        logInfo("Air Conditioner", "AC action: " + arduino_cmd)
        sendCommand(Arduino, arduino_cmd);
      }
    }
end

rule "AC Air Conditioner update"
  when
    Item ac_power  received command or
    Item ac_mode   received update or
    Item ac_fan    received update or
    Item ac_i_feel changed or
    Item ac_temp   received update
  then
    var String arduino_cmd = "$2,";
   
    if (receivedCommand == ON) {
      arduino_cmd += "1,";
      ac_i_feel.state = OFF;
    } else {
      arduino_cmd += "0,";
    }
    arduino_cmd += ac_mode.state + "," + ac_fan.state + "," + "0" + ",";
    if (ac_i_feel.state == ON) {
        arduino_cmd += "1,";
    } else {
        arduino_cmd += "0,";
    }
    arduino_cmd += ac_temp.state + ",#";

    logInfo("Air Conditioner", "AC action: " + arduino_cmd)
    sendCommand(Arduino, arduino_cmd);
    //executeCommandLine(command);
end
