
rule "AC System Start"
  when
    System started
  then
    ac_mode.postUpdate(1)
    ac_temp.postUpdate(25)
    ac_fan.postUpdate(3)
    Arduino.sendCommand("$1,#")
end

rule "AC Poll Temp Humid"
  when
    Time cron "0 * * ? * *"
  then
    // ask for the temperatures if i-feel is turned on or every 20 minutes
    if (ac_i_feel.state == ON || now.getMinuteOfHour % 20 == 0) {
      Arduino.sendCommand("$1,#")
    }
end

rule "AC Arduino message"
  when
    Item Arduino received update
  then
    var String json = Arduino.state.toString

    var temp = transform("JSONPATH", "$.temperature", json)
    if (temp != null) {
      livingTemp01.postUpdate(temp)
      if (ac_i_feel.state == ON) {
        // +0.5 for rounding
        // +0.4 faster response (-0.4 for heating)
        var i_feel_offset = 0.4
        if (ac_mode.state == 2) {
          i_feel_offset = -0.4
        }
        var String arduino_cmd = "$2,0," + ac_mode.state + "," + ac_fan.state + ",1,1," + (Float::parseFloat(temp) + 0.5 + i_feel_offset).intValue + ",#"
        Arduino.sendCommand(arduino_cmd)
      }
    }

    var humid = transform("JSONPATH", "$.humidity", json)
    if (humid != null) {
      livingHum01.postUpdate(humid)
    }

    var st = transform("JSONPATH", "$.ac_state", json)
    if (st != null) {
      ac_state.postUpdate(st)
    }
end

rule "AC Air Conditioner update"
  when
    Item ac_power  received command or
    Item ac_mode   received update or
    Item ac_fan    received update or
    Item ac_i_feel changed or
    Item ac_temp   received update
  then
    var String arduino_cmd = "$2,"
   
    if (receivedCommand == ON) {
      arduino_cmd += "1,"
      ac_i_feel.state = OFF
    } else {
      arduino_cmd += "0,"
    }
    arduino_cmd += ac_mode.state + "," + ac_fan.state + "," + "0" + ","
    if (ac_i_feel.state == ON) {
        arduino_cmd += "1,"
    } else {
        arduino_cmd += "0,"
    }
    arduino_cmd += ac_temp.state + ",#"

    Arduino.sendCommand(arduino_cmd)
end
