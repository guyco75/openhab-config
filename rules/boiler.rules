
var Timer boiler_timer = null

rule "Boiler System Start"
  when
    System started
  then
    sendCommand(boiler_sw, OFF);
    postUpdate(boiler_p, 0);
    postUpdate(boiler_h, 17);
    postUpdate(boiler_m, 0);
    postUpdate(boiler_d, 120);
end

rule "Boiler settings update"
  when
    Item boiler_p received update or
    Item boiler_h received update or
    Item boiler_m received update or
    Item boiler_d received update
  then
    logInfo("Boiler", boiler_p.state.toString);

    if (boiler_timer != null) {
        logInfo("Boiler", "removing timer")
        boiler_timer.cancel
        boiler_timer = null
    }

    switch (boiler_p.state) {
      case 0:
	    sendCommand(boiler_sw, OFF)

      case 1:
	    sendCommand(boiler_sw, ON)

      case 2: {
        logInfo("Boiler", "Set Boiler Timer")
        var h = (boiler_h.state as DecimalType).intValue
        var m = (boiler_m.state as DecimalType).intValue
        var d = (boiler_d.state as DecimalType).intValue

        var start_time = h*60 + m
        var end_time = start_time + d
        var nowMin = now.getMinuteOfDay

        if (end_time < start_time)
          end_time += 24*60

        if (start_time <= nowMin && nowMin < end_time) {
          logInfo("Boiler", "TIMER: ON  |  start_time="+start_time + "  end_time="+end_time + "  nowMin="+nowMin)
          sendCommand(boiler_sw, ON)
          var t=now.plusMinutes(end_time-nowMin).withSecondOfMinute(0).withMillisOfSecond(0)
          boiler_timer = createTimer(t) [|
	        postUpdate(boiler_p, 0)
	      ]
        } else {
          sendCommand(boiler_sw, OFF)
		  if (start_time < nowMin)
			start_time += 24*60
          logInfo("Boiler", "TIMER: WAIT  |  start_time="+start_time + "  end_time="+end_time + "  nowMin="+nowMin)
          var t=now.plusMinutes(start_time-nowMin).withSecondOfMinute(0).withMillisOfSecond(0)
          boiler_timer = createTimer(t) [|
	        postUpdate(boiler_p, 2) /// JUST TRIGGER WITHOUT 2!!
	      ]
        }
      }
    }
end

